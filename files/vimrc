set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.

" Plugin 'airblade/vim-gitgutter'
Plugin 'altercation/vim-colors-solarized'
" Plugin 'bling/vim-airline'
Plugin 'briancollins/vim-jst'
Plugin 'evanmiller/nginx-vim-syntax'
Plugin 'fatih/vim-go'
" Plugin 'garbas/vim-snipmate.git'
" Plugin 'groenewege/vim-less.git'
" Plugin 'honza/vim-snippets'
Plugin 'itspriddle/vim-jquery.git'
Plugin 'jtratner/vim-flavored-markdown.git'
Plugin 'kchmck/vim-coffee-script'
Plugin 'kien/ctrlp.vim'
" Plugin 'mattn/gist-vim'
Plugin 'mileszs/ack.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'plasticboy/vim-markdown'
Plugin 'rking/ag.vim'
" Plugin 'scrooloose/nerdtree'
Plugin 'tomtom/tlib_vim'
" Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-endwise.git'
" Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-git'
Plugin 'tpope/vim-haml'
Plugin 'tpope/vim-ragtag'
Plugin 'tpope/vim-rails.git'
Plugin 'tpope/vim-rake.git'
Plugin 'tpope/vim-repeat.git'
Plugin 'tpope/vim-surround.git'
Plugin 'tpope/vim-unimpaired'
Plugin 'vim-addon-mw-utils'
Plugin 'vim-ruby/vim-ruby.git'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just
" :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
let g:ruby_path = system('echo $HOME/.rbenv/shims')

syntax enable
set background=dark
let g:solarized_visibility = "high"
let g:solarized_contrast = "high"
let g:solarized_termcolors = 16
colorscheme solarized
set guifont=Monaco:h16
" set guifont=PowerlineSymbols:h16
set encoding=utf-8
let mapleader=','

set nowrap
set tabstop=2
set shiftwidth=2
set expandtab
set backspace=indent,eol,start
set history=1000
set laststatus=2
set nobackup
set nocompatible
set noswapfile
set nowritebackup
set ruler
set showcmd
set list listchars=tab:»·,trail:·

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Show line numbers
set nu

" nnoremap <Left> <Nop>
" nnoremap <Right> <Nop>
" nnoremap <Up> <Nop>
" nnoremap <Down> <Nop>

set autoread
set hidden
set scrolloff=5
set colorcolumn=120
set clipboard=unnamed

" Use Ag (https://github.com/ggreer/the_silver_searcher) instead of Grep when
" available
if executable("ag")
  set grepprg=ag\ --noheading\ --nogroup\ --nocolor
endif

" Buffers
" Move to the next buffer
nmap <leader>l :bnext<CR>
" Move to the previous buffer
nmap <leader>h :bprevious<CR>
" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <leader>bd :bp <BAR> bd #<CR>
" Show all open buffers and their status
nmap <leader>bl :ls<CR>

" vim-airline
" the separator used on the left side >
" let g:airline_left_sep = ''

" the separator used on the right side >
" let g:airline_right_sep=''

" let g:airline#extensions#tabline#enabled=1
" let g:airline#extensions#tabline#fnamemod=':t'
" let g:airline#extensions#tabline#left_sep = ''
" let g:airline#extensions#tabline#left_alt_sep = ''
" let g:airline#extensions#tabline#right_sep = ''
" let g:airline#extensions#tabline#right_alt_sep = ''
" let g:airline_detect_modified=1
" let g:airline_detect_paste=1
" let g:airline_enable_branch=1
" let g:airline_powerline_fonts=1

" eliminate truncation
" let g:airline#extensions#default#section_truncate_width = { }

" CtrlP
" CtrlP for fuzzy finding
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" Switch to the file if it's already open
let g:ctrlp_switch_buffer = 'E'

" ag is fast enough that CtrlP doesn't need to cache
let g:ctrlp_use_caching = 0

" Make CtrlP use ag for listing the files. Much faster and respects .gitignore
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

" NERDTree
" let NERDTreeMinimalUI=1
" let NERDTreeDirArrows=1
" let NERDTreeChDirMode=2
" let NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
" let NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
" let g:nerdtree_tabs_focus_on_files=1
" let g:NERDTreeWinSize=30

set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite

" keymap
" Clear current search highlight by double tapping //
nmap <silent> // :nohlsearch<CR>

" File browser
" nmap <silent> ,n :NERDTreeToggle<CR>
" nmap <silent> ,f :NERDTreeFind<CR>

