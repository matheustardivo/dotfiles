export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
# export NLS_LANG=en_US.UTF-8
export NLS_LANG="AMERICAN_AMERICA.UTF8"
# Oracle Instant Client
export DYLD_LIBRARY_PATH=/opt/oracle/instantclient_11_2
export TNS_ADMIN=/opt/oracle/instantclient_11_2/network/admin

source /usr/local/etc/bash_completion.d/git-completion.bash
source /usr/local/etc/bash_completion.d/git-prompt.sh
source ~/.bundler-exec.sh
source ~/.sdkman/springboot/current/shell-completion/bash/spring

stty werase undef
bind '"\C-w": backward-kill-word'

export GIT_PS1_SHOWDIRTYSTATE=true
export GIT_PS1_SHOWSTASHSTATE=true
export GIT_PS1_SHOWUNTRACKEDFILES=true
export GIT_PS1_SHOWUPSTREAM="auto"

# Colors
color_off='\e[0m' # Text Reset
black='\e[0;30m' # Black
bright_black='\e[1;30m' # Black
red='\e[0;31m' # Red
green='\e[0;32m' # Green
yellow='\e[0;33m' # Yellow
blue='\e[0;34m' # Blue
purple='\e[0;35m' # Purple
cyan='\e[0;36m' # Cyan
white='\e[0;37m' # White

# Tell things to be colourful
export CLICOLOR=1
export GREP_COLOR="1;31"
export GREP_OPTIONS='--color=auto'
export LESS="-R"
export TERM=xterm-256color

# Oversized history
export HISTSIZE=5000

__rbenv_ps1 ()
{
  rbenv_ruby_version=`rbenv version | sed -e 's/ .*//'`
  printf $rbenv_ruby_version
}

__node_ps1 ()
{
  node_version=`node -v | sed -e 's/ .*//'`
  printf $node_version
}

__rbenv_gemset ()
{
  if [ -f .rbenv-gemsets ]; then
    echo "@$(cat .rbenv-gemsets)";
  fi
}

export PS1='\nruby:($(__rbenv_ps1)$(__rbenv_gemset)) node:($(__node_ps1)) \w$(__git_ps1 " (%s)")\n\$ '
export PATH=/usr/local/bin:/usr/local/sbin:/usr/local/share/npm/bin:/opt/oracle/instantclient_11_2:/Users/mttardi/code/java/apache-jmeter-2.12/bin:$PATH

# Call Aliases
source ~/.aliases

export JAVA_HOME=$(/usr/libexec/java_home)
# export JAVA_HOME=$(/usr/libexec/java_home -v 1.7)

if [ -d $HOME/.rbenv ]; then
  export PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init -)"
fi

function __server() {
    ruby -e '
    require "yaml"

    applications = YAML.load_file("#{Dir.home}/.servers.yml")
    app_name = ARGV.shift
    env_name = ARGV.shift

    def yellow(msg)
      "\033[33;33m#{msg}\033[0m"
    end

    def red(msg)
      "\033[33;31m#{msg}\033[0m"
    end

    def exit_with_message(msg)
      puts msg
      exit 1
    end

    exit_with_message "usage: server [application] [environment{index}]" if app_name.nil? or env_name.nil?

    application = applications[app_name]
    exit_with_message "#{red("application not found")}\navaliable applications are #{yellow(applications.keys)}" if application.nil?

    servers = application[env_name]
    if servers.nil?
      msg = "environment #{red(env_name)} not found for application #{yellow(app_name)}\navaliable environments are #{yellow(application.keys)}"

      server_and_index = env_name.match(/^(\D{1,})(\d{1,}$)/)
      exit_with_message msg if server_and_index.nil?

      servers = Array(application[server_and_index[1]][server_and_index[2].to_i.pred])
      exit_with_message msg if servers.nil?
    end

    cmd = servers.count == 1 ? :ssh : :csshX
    puts "accessing server(s) #{yellow(servers)}..."
    system "#{cmd} #{(servers + ARGV).join(" ")}"' $@
}

function server() {
  tmux-cssh -cs $1
}

_server() {
    local cur="${COMP_WORDS[COMP_CWORD]}"
    local prev=${COMP_WORDS[COMP_CWORD-1]}

    if [[ "$prev" == "server" ]]; then
        local projects=$(ruby -e 'require "yaml"; puts YAML.load_file("#{Dir.home}/.servers.yml").keys.join(" ") rescue ""')
    else
        local projects=$(ruby -e "require 'yaml'; puts YAML.load_file(\"#{Dir.home}/.servers.yml\")['$prev'].keys.join(' ') rescue ''")
    fi

    COMPREPLY=()
    COMPREPLY=( $(compgen -W "${projects}" -- ${cur}) )
}
complete -F _server server

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

export NVM_DIR="/Users/mttardi/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
[[ -s "/Users/mttardi/.sdkman/bin/sdkman-init.sh" ]] && source "/Users/mttardi/.sdkman/bin/sdkman-init.sh"
